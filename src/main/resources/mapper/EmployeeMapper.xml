<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 映射 接口 EmployeeDao -->
<mapper namespace="com.emp.employeeManage.dao.EmployeeDao">


    <!--登录校验-->
    <select id="queryByUserName" resultType="com.emp.employeeManage.entity.Employee">
        select * from tb_employee_manage where status = 1 and userName=#{userName}
        <if test="password != null and password != ''">
            and password=#{password}
        </if>
    </select>


    <!-- 根据条件模糊查询账号列表详情 -->
    <select id="queryEmployeeByLike" resultType="com.emp.employeeManage.entity.Employee">
        select * from tb_employee_manage where status = 1
        <if test="employee != null">
            <if test="employee.realName != null">
                and realName like "%"#{employee.realName,jdbcType=VARCHAR}"%"
            </if>
            <if test="employee.userName != null">
                and userName like "%"#{employee.userName,jdbcType=VARCHAR}"%"
            </if>
            <if test="employee.phone != null">
                and phone like "%"#{employee.phone,jdbcType=VARCHAR}"%"
            </if>
            <if test="employee.id != null and employee.id != 0">
                and id = ${employee.id}
            </if>
        </if>
        order by id asc
        <if test="pages != null">
            <if test="pages.startRow != null and pages.size != null">
                limit ${pages.startRow},${pages.size}
            </if>
        </if>
    </select>


    <!-- 根据条件模糊查询账号列表总条数 -->
    <select id="countEmployeeByLike" resultType="int">
        select count(*) from tb_employee_manage where status = 1
        <if test="employee != null">
            <if test="employee.realName != null">
                and realName like "%"#{employee.realName,jdbcType=VARCHAR}"%"
            </if>
            <if test="employee.userName != null">
                and userName like "%"#{employee.userName,jdbcType=VARCHAR}"%"
            </if>
            <if test="employee.phone != null">
                and phone like "%"#{employee.phone,jdbcType=VARCHAR}"%"
            </if>
            <if test="employee.id != null and employee.id != 0">
                and id = ${employee.id}
            </if>
        </if>
    </select>


    <!-- 根据勾选查询账号列表详情 -->
    <select id="queryEmployeeByCheck" parameterType="int[]" resultType="com.emp.employeeManage.entity.Employee">
        select * from tb_employee_manage where status = 1 and id in
        <foreach collection="ids" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
        order by id asc
    </select>


    <!-- 新增账号实例 -->
    <insert id="insertEmployee" parameterType="com.emp.employeeManage.entity.Employee">
        INSERT INTO tb_employee_manage(userName,password,realName,phone,email,sex)
        values (#{userName},#{password},#{realName},#{phone},#{email},${sex});
        <!-- 需要返回自增主键:1.dao参数不能加注解 2.增加下面语句 -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID() as id
        </selectKey>
    </insert>


    <!-- 修改账号实例 -->
    <update id="updateEmployee" parameterType="com.emp.employeeManage.entity.Employee">
        update tb_employee_manage set
            userName = #{employee.userName},
            password = #{employee.password},
            realName = #{employee.realName},
            phone = #{employee.phone},
            email = #{employee.email},
            sex = ${employee.sex},
            updateTime = current_timestamp
        where status = 1 and id = #{employee.id}
    </update>


    <!-- 新增人员角色关联实例(新增按钮) -->
    <insert id="addER">
        INSERT INTO tb_employee_role(employeeId,roleId) values
        <foreach collection="ids" item="ids" separator=",">
            (#{employeeId},#{ids})
        </foreach>
    </insert>


    <!-- 移除人员角色关联实例 -->
    <delete id="removeER">
        delete from tb_employee_role where employeeId = #{employeeId} and roleId in
        <foreach collection="ids" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
    </delete>


    <!-- 删除账号实例(包括中间表) -->
    <delete id="deleteEmployees" parameterType="int[]">
        delete from tb_employee_role where employeeId in
        <foreach collection="ids" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
        ;
        delete from tb_employee_manage where id in
        <foreach collection="ids" item="ids" open="(" separator="," close=")">
            #{ids}
        </foreach>
        ;
    </delete>

</mapper>