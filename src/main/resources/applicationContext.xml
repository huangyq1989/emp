<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


    <!-- 扫描 service 包下面使用@Component/@Service/@Repository/@Controller 注解的类 将其实例化，放入容器中,这个是在spring配置   -->
    <context:component-scan base-package="com.emp.*.service" />

    <!--创建数据源--><!--切换环境修改 1.数据库   2.config.properties    3.log4j.properties -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"><!--本地环境-->
        <!-- 数据库驱动 -->
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
        <!-- 本地-数据库连接 allowMultiQueries=true开启一个方法执行多条语句-->
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/emp?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true" />
        <!-- 本地-数据库用户名 -->
        <property name="user" value="root"/>
        <!-- 本地-数据库密码 -->
        <property name="password" value="root1234"/>

        <!-- 初始化连接池连接数 -->
        <property name="initialPoolSize" value="10"/>
        <!-- 连接池最小连接数 -->
        <property name="minPoolSize" value="10"/>
        <!-- 连接池最大连接数 -->
        <property name="maxPoolSize" value="100"/>
        <!-- 现有连接已经用完，在申请连接一次申请数量 -->
        <property name="acquireIncrement" value="4"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃 -->
        <property name="maxIdleTime" value="60"/>
        <!-- 每60秒检查所有连接池中的空闲连接 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待 -->
        <property name="checkoutTimeout" value="30000"/>
        <!-- 测试连接 -->
        <property name="preferredTestQuery"><value>select 1</value></property>
    </bean>


    <!-- 配置mybatis  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源的实例化 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 映射 DML 语法 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis.xml" />
        <!--&lt;!&ndash; 由MyBatis 管理事务 &ndash;&gt;-->
        <!--<property name="transactionFactory">-->
            <!--<bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />-->
        <!--</property>-->
    </bean>

    <!-- 映射 数据访问层 ( dao ) 中的接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.emp.*.dao"/>
    </bean>



    <!-- 以下是配置:定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 开启事务控制的注解支持，配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!-- 事务通知 -->
    <tx:advice id="txAdivce" transaction-manager="transactionManager">
        <tx:attributes>
            <!--对insert,update,delete 开头的方法进行事务管理,有异常就回滚-->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="find*" read-only="false"/>
            <tx:method name="select*" read-only="false"/>
            <tx:method name="count*" read-only="false"/>
            <tx:method name="get*" read-only="false"/>
            <tx:method name="view*" read-only="false"/>
            <tx:method name="query*" read-only="false"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 通过aop切面管理事务 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.emp.*.service.*.*(..))" id="txPointcut"/>
        <aop:advisor advice-ref="txAdivce" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true" />

</beans>